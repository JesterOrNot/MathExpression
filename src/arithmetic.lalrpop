use std::str::FromStr;

grammar;

pub Expr: f64 = {
    <l:Expr> "+" <r:Factor> => l + r,
    "-" <r:Factor> => -r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: f64 = {
    <num1:Factor> "**" <num2:Term> => f64::powf(num1, num2),
    <num1:Factor> "^" <num2:Term> => f64::powf(num1, num2),
    <num1:Factor> "*" <num2:Term> => num1 * num2,
    <num1:Factor> "/" <num2:Term> => num1 / num2,
    Term,
};

pub Term = {
    Num,
    "(" <Expr> ")",
    "log" "(" <base:Expr> "," <sol:Expr> ")" => base.log(sol),
    "sqrt" "(" <num:Expr> ")" => num.sqrt(),
    "abs" "(" <num:Expr> ")" => num.abs()
};

Num: f64 = {
    r"-?[1-9][0-9]*(?:\.[0-9]*)?" => f64::from_str(<>).unwrap(),
};
